{
  "version": 3,
  "sources": ["../../src/client/scripts/handleWsMessage.ts", "../../dependencies/statsFunc.ts", "../../src/client/scripts/app.ts"],
  "sourcesContent": ["/**\r\n * Handle event data from ws communication with server\r\n * @param messageString ws event data\r\n * @returns payload if necessary\r\n */\r\nconst handleWsMessage = (messageString: string) => {\r\n    const message = JSON.parse(messageString)\r\n    \r\n    //Echo test\r\n    if (message.type === 'echo') return {type: 'info', payload: message.payload}\r\n    \r\n    //Debug log\r\n    if (message.type === 'info') {\r\n        console.log(`[ws]: ${message.payload}`)\r\n        return\r\n    }\r\n    \r\n    //Response for parse bin datas (ABC)\r\n    if (message.type === 'abc') {\r\n        return {type: 'abc', payload: message.payload}\r\n    }\r\n\r\n    //Response for parse dat datas (GENE)\r\n    if (message.type === 'gene') {\r\n        return {type: 'gene', payload: message.payload}\r\n    }\r\n\r\n    throw new Error(`Unknown message type: ${messageString}`)    \r\n}\r\n\r\nexport { handleWsMessage }", "/**\r\n * Calculate the esperance of a 1D set of values\r\n * @param values Values to process on\r\n * @returns Arithmetic mean of data set\r\n */\r\nconst esperance = (...values: number[]) => {\r\n    return values.reduce((prev, curr) => prev + curr) / values.length\r\n}\r\n\r\n/**\r\n * Calculate the variance od 1D set of values\r\n * @param values Values to process on\r\n * @returns Variance of data set\r\n */\r\nconst variance = (...values: number[]) => {\r\n    return esperance(...values.map(value => value **2)) - esperance(...values) ** 2\r\n}\r\n\r\n/**\r\n * Calculate the covariance between 2 * 1D set of values\r\n * @param x First values array\r\n * @param y Second values array\r\n * @returns Covariance between x and y\r\n */\r\nconst covariance = (x: number[], y: number[]) => {\r\n    return esperance(...x.map((xi, index) => xi * y[index])) - esperance(...x) * esperance(...y)\r\n}\r\n\r\nconst coeffMoindre2 = (x: number[], y: number[]) => {\r\n    const a = covariance(x, y) / variance(...x)\r\n    const b = esperance(...y) - a * esperance(...x)\r\n    return {a, b}\r\n}\r\n\r\nconst incertitudesMoindre2 = (x: number[], y: number[]) => {\r\n    const N = x.length\r\n    //Somme carr\u00E9\r\n    const Sx2 = x.reduce((prev, cur) => prev + cur ** 2)\r\n    const {a, b} = coeffMoindre2(x, y)\r\n    //Sigma sur y\r\n    const sy = Math.sqrt((1 / (N - 2)) * x.reduce((prev, _cur, index) => \r\n        prev + (y[index] - b - a * x[index]) ** 2\r\n    ))\r\n    const delta = x.length * (x.reduce((prev, cur) => prev + cur ** 2))\r\n    const ua = 2 * Math.sqrt(sy * Math.sqrt(N / delta))\r\n    const ub = 2 * Math.sqrt(sy * Math.sqrt(Sx2 / delta))\r\n    return {ua, ub}\r\n}\r\n\r\nconst r2 = (x: number[], y: number[]) => {\r\n    const fX = coeffMoindre2(x, y)\r\n    const fY = coeffMoindre2(y, x)\r\n    return fX.a * fY.a\r\n}\r\n\r\n/**\r\n * Uses moindre\u00B2 methode to linearize a 2D data set\r\n * @param x First list of values\r\n * @param y Second list of values\r\n * @returns a: slop, b: intercept, ua: incertitude on slop, ub: incertitude on intercept, r2: correlation coefficient\r\n */\r\nconst moindre2 = (x: number[], y: number[]) => {\r\n    const {a, b} = coeffMoindre2(x, y)\r\n    const {ua, ub} = incertitudesMoindre2(x, y)\r\n    return {a, b, ua, ub, r2: r2(x, y)}\r\n}\r\n\r\n/**\r\n * Determine the min and the max of 1D array\r\n * @param values Values to process on\r\n * @returns [minimum value, maximum value]\r\n */\r\nconst extremum = (...values: number[]) => {\r\n    let min = values[0]\r\n    let max = values[0]\r\n    for(const value of values) {\r\n        min = value < min ? value : min\r\n        max = value > max ? value : max\r\n    }\r\n    return [min, max]\r\n}\r\n\r\n/**\r\n * Determine the mediane of 1D array\r\n * @param values Values to process on\r\n * @returns At least the middle index of sorted values\r\n */\r\nconst mediane = (...values: number[]) => {\r\n    const sorted = values.sort((a, b) => a - b)\r\n    return sorted[Math.round(values.length / 2) - 1]\r\n}\r\n\r\nexport {esperance, variance, covariance, moindre2, r2, extremum, mediane}", "import { handleWsMessage } from './handleWsMessage.ts'\r\nimport { Data } from '../../../dependencies/abcAdapter.ts'\r\nimport * as GENE from '../../../dependencies/geneAdapter.ts'\r\nimport * as STATS from '../../../dependencies/statsFunc.ts'\r\nconst ws = new WebSocket('ws://localhost:3000')\r\n\r\nlet data: Data[]\r\nlet geneData: GENE.Data[]\r\n\r\n//Websocket communication\r\nws.onerror = (e) => {\r\n\tconsole.error(`[ws]: ${e}`)\r\n}\r\n\r\nws.onopen = (_) => {\r\n\tconsole.log(`[ws]: Connected to ws://localhost:3000`)\r\n\tconst message = { type: 'echo', payload: 'ready' }\r\n\tws.send(JSON.stringify(message))\r\n}\r\n\r\nws.onmessage = (e) => {\r\n\tconst response = handleWsMessage(e.data)\r\n\t//MAJ de abc data\r\n\tif (response?.type === 'abc') data = response?.payload\r\n\t//MAJ de gene data\r\n\tif (response?.type === 'gene') geneData = response?.payload\r\n\t//For debug\r\n\tif (response !== undefined)\r\n\t\tws.send(JSON.stringify({ type: 'info', payload: 'client recived' }))\r\n}\r\n\r\n/**\r\n * Shortcut for querySelector / querySelectorAll\r\n * @param selector HTML slector\r\n * @returns Targeted HTMLElement(s)\r\n */\r\nconst $ = (selector: string): HTMLElement | HTMLElement[] => {\r\n\tconst elements = document.querySelectorAll(selector)\r\n\tif (elements.length === 1) return elements[0]\r\n\treturn Array.from(elements)\r\n}\r\n\r\n//Select menu\r\nconst menuButtons = $('#abc-tabs>button')\r\nmenuButtons.forEach((button) => {\r\n\tbutton.addEventListener('click', () => {\r\n\t\tmenuButtons.forEach((e) => {\r\n\t\t\te.classList.remove('active')\r\n\t\t\tif (e.value !== '') $(`#${e.value}`).style.display = 'none'\r\n\t\t})\r\n\t\tbutton.classList.add('active')\r\n\t\tif (button.value !== '') $(`#${button.value}`).style.display = 'block'\r\n\t})\r\n})\r\n\r\nconst jsonAutoDownload = (data: unknown, fileName: string) => {\r\n\tconst json = JSON.stringify(data)\r\n\tconst uri = encodeURI(json)\r\n\tconst link = document.createElement('a')\r\n\tlink.setAttribute('href', uri)\r\n\tconsole.log(uri)\r\n\tlink.setAttribute('download', fileName)\r\n\tdocument.body.appendChild(link)\r\n\tlink.click()\r\n\tdocument.body.removeChild(link)\r\n}\r\n\r\n/**\r\n * Etalonnage carte ABC et Gene\r\n */\r\n\r\nconst loadButton = $('#load-button')\r\nconst folderPath = $('#folder-path')\r\nconst forcedFocus = $('#forced-focus')\r\nconst exportData = $('#export-data')\r\n\r\nloadButton.addEventListener('click', () => {\r\n\tif (loadButton.value === 'abc') {\r\n\t\t//Store forced channel string into number[]\r\n\t\tconst forcedFocusValues = forcedFocus.value\r\n\t\t\t?.split(',')\r\n\t\t\t?.map((e) => parseInt(e) ?? [])\r\n\r\n\t\tws.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: 'abc',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tpath: folderPath.value,\r\n\t\t\t\t\tforcedFocus: forcedFocusValues,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n\tif (loadButton.value === 'gene') {\r\n\t\tws.send(\r\n\t\t\tJSON.stringify({\r\n\t\t\t\ttype: 'gene',\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tpath: folderPath.value,\r\n\t\t\t\t\tconfig: { width: 10, rise: 5, fall: 5 },\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n})\r\n\r\nexportData.addEventListener('click', () => {\r\n\t//export to json file in future or copy in clipboard\r\n\tif (exportData.value === 'abc') jsonAutoDownload(data, 'abc.json')\r\n\tif (exportData.value === 'gene') jsonAutoDownload(geneData, 'gene.json')\r\n})\r\n\r\nif (window.location.pathname === '/gene') {\r\n\t$('#trace-graph').addEventListener('click', () => {\r\n\t\tconst sortedGene = geneData.sort(\r\n\t\t\t(prev, cur) => prev.voltage - cur.voltage\r\n\t\t)\r\n\r\n\t\tconst trace = {\r\n\t\t\tx: sortedGene.map((e) => e.voltage),\r\n\t\t\ty: sortedGene.map((e) => e.mean),\r\n\t\t\terror_y: {\r\n\t\t\t\ttype: 'data',\r\n\t\t\t\tarray: sortedGene.map((e) => e.sigma),\r\n\t\t\t\tvisible: true,\r\n\t\t\t},\r\n\t\t\ttype: 'scatter',\r\n\t\t}\r\n\r\n\t\tconst data = [trace]\r\n\r\n\t\tconst layout = {\r\n\t\t\ttitle: '\u00C9talonnage g\u00E9n\u00E9rateur',\r\n\t\t\tshowlegend: false,\r\n\t\t\txaxis: {\r\n\t\t\t\ttitle: 'Tension (mV)',\r\n\t\t\t},\r\n\t\t\tyaxis: {\r\n\t\t\t\ttitle: 'Charge (pC)',\r\n\t\t\t},\r\n\t\t}\r\n\r\n\t\t//Global function if html\r\n\t\tGraph('gene-graph', data, layout, { scrollZoom: true, editable: true })\r\n\r\n\t\t//Linear fit \"meanCharge = f(voltage)\"\r\n\t\tconst stats = STATS.moindre2(\r\n\t\t\tsortedGene.map((e) => e.voltage),\r\n\t\t\tsortedGene.map((e) => e.mean)\r\n\t\t)\r\n\r\n\t\t//Prettify json\r\n\t\t$('#gene-stats').innerText = JSON.stringify(stats)\r\n\t\t\t.replaceAll('{', '{\\n')\r\n\t\t\t.replaceAll('}', '\\n}')\r\n\t\t\t.replaceAll(',\"', ',\\n\"')\r\n\t})\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
