{
  "version": 3,
  "sources": ["../../src/client/scripts/handleWsMessage.ts", "../../src/client/scripts/app.ts"],
  "sourcesContent": ["/**\r\n * Handle event data from ws communication with server\r\n * @param messageString ws event data\r\n * @returns payload if necessary\r\n */\r\nconst handleWsMessage = (messageString: string) => {\r\n    const message = JSON.parse(messageString)\r\n    \r\n    //Echo test\r\n    if (message.type === 'echo') return {type: 'info', payload: message.payload}\r\n    \r\n    //Debug log\r\n    if (message.type === 'info') {\r\n        console.log(`[ws]: ${message.payload}`)\r\n        return\r\n    }\r\n    \r\n    //Response for parse bin datas\r\n    if (message.type === 'parse') {\r\n        return {type: 'data', payload: JSON.parse(message.payload)}\r\n    }\r\n\r\n    throw new Error(`Unknown message type: ${messageString}`)    \r\n}\r\n\r\nexport { handleWsMessage }", "import { handleWsMessage } from './handleWsMessage.ts'\r\nimport { Data } from '../../../dependencies/abcAdapter.ts'\r\nconst ws = new WebSocket('ws://localhost:3000')\r\n\r\nlet data: Data[]\r\n\r\n//Websocket communication\r\nws.onerror = (e) => {\r\n    console.error(`[ws]: ${e}`)\r\n}\r\n\r\nws.onopen = (_) => {\r\n    console.log(`[ws]: Connected to ws://localhost:3000`)\r\n    const message = {type: 'echo', payload: 'ready'}\r\n    ws.send(JSON.stringify(message))\r\n}\r\n\r\nws.onmessage = (e) => {\r\n    const response = handleWsMessage(e.data)\r\n    //MAJ de data\r\n    if (response?.type === 'data') data = response?.payload\r\n    //For debug\r\n    if (response !== undefined) ws.send(JSON.stringify({type: 'info', payload: 'client recived'}))\r\n}\r\n\r\n/**\r\n * Shortcut for querySelector / querySelectorAll\r\n * @param selector HTML slector\r\n * @returns Targeted HTMLElement(s)\r\n */\r\nconst $ = (selector: string) => {\r\n    const elements = document.querySelectorAll(selector)\r\n    if (elements.length === 1) return elements[0]\r\n    return elements\r\n}\r\n\r\nconst loadButton = $('#load-button')\r\nconst folderPath = $('#folder-path')\r\nconst forcedFocus = $('#forced-focus')\r\nconst exportData = $('#export-data')\r\n\r\n\r\nloadButton.addEventListener('click', () => {\r\n    //Store forced channel string into number[]\r\n    const forcedFocusValues = forcedFocus.value?.split(',')?.map(e => parseInt(e) ?? [])\r\n    \r\n    ws.send(JSON.stringify({type: 'parse', payload: {path: folderPath.value, forcedFocus: forcedFocusValues}}))\r\n})\r\n\r\nexportData.addEventListener('click', () => {\r\n    //export to json file in future\r\n    console.log(data)\r\n})"],
  "mappings": ";;AAKA,MAAM,kBAAkB,CAAC;AACrB,UAAM,UAAU,KAAK,MAAM;AAG3B,QAAI,QAAQ,SAAS;AAAQ,aAAO,CAAC,MAAM,QAAQ,SAAS,QAAQ;AAGpE,QAAI,QAAQ,SAAS;AACjB,cAAQ,IAAI,SAAS,QAAQ;AAC7B;AAAA;AAIJ,QAAI,QAAQ,SAAS;AACjB,aAAO,CAAC,MAAM,QAAQ,SAAS,KAAK,MAAM,QAAQ;AAAA;AAGtD,UAAM,IAAI,MAAM,yBAAyB;AAAA;;;ACpB7C,MAAM,KAAK,IAAI,UAAU;AAEzB,MAAI;AAGJ,KAAG,UAAU,CAAC;AACV,YAAQ,MAAM,SAAS;AAAA;AAG3B,KAAG,SAAS,CAAC;AACT,YAAQ,IAAI;AACZ,UAAM,UAAU,CAAC,MAAM,QAAQ,SAAS;AACxC,OAAG,KAAK,KAAK,UAAU;AAAA;AAG3B,KAAG,YAAY,CAAC;AACZ,UAAM,WAAW,gBAAgB,EAAE;AAEnC,QAAI,UAAU,SAAS;AAAQ,aAAO,UAAU;AAEhD,QAAI,aAAa;AAAW,SAAG,KAAK,KAAK,UAAU,CAAC,MAAM,QAAQ,SAAS;AAAA;AAQ/E,MAAM,IAAI,CAAC;AACP,UAAM,WAAW,SAAS,iBAAiB;AAC3C,QAAI,SAAS,WAAW;AAAG,aAAO,SAAS;AAC3C,WAAO;AAAA;AAGX,MAAM,aAAa,EAAE;AACrB,MAAM,aAAa,EAAE;AACrB,MAAM,cAAc,EAAE;AACtB,MAAM,aAAa,EAAE;AAGrB,aAAW,iBAAiB,SAAS;AAEjC,UAAM,oBAAoB,YAAY,OAAO,MAAM,MAAM,IAAI,OAAK,SAAS,MAAM;AAEjF,OAAG,KAAK,KAAK,UAAU,CAAC,MAAM,SAAS,SAAS,CAAC,MAAM,WAAW,OAAO,aAAa;AAAA;AAG1F,aAAW,iBAAiB,SAAS;AAEjC,YAAQ,IAAI;AAAA;",
  "names": []
}
